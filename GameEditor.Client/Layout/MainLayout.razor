@using GameEditor.Client.Components.Dialogs
@using GameEditor.Client.Services
@using System.Text.Json.Serialization
@using System.Text.Json
@using GameModel.Models

@inject IGamePackService GamePackService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject NavigationManager Nav
@inject IJSRuntime JS

@inherits LayoutComponentBase
<HeadContent>
    <RadzenTheme Theme="material" />
</HeadContent>

<RadzenLayout>
    <RadzenHeader>
        <RadzenRow>
            <RadzenColumn Size="1">
                <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
            </RadzenColumn>
            <RadzenColumn >
                
                <RadzenText TextStyle="TextStyle.H5" class="rz-border-radius-5 rz-primary rz-p-4">
                    GameEditor
                    @if (GamePackService.Current is not null)
                    {
                        <span>&nbsp;— @GamePackService.Current.Title</span>
                    }
                    @if (GamePackService.Current is not null)
                    {
                        <RadzenButton Icon="edit"
                                      Size="ButtonSize.Small"
                                      ButtonStyle="ButtonStyle.Light"
                                      Class="rz-ml-2"
                                      Click="EditGame" />
                    }
                </RadzenText>
               
            </RadzenColumn>
        </RadzenRow>
    </RadzenHeader>
    <RadzenSidebar  Style="width: max-content">
        <RadzenPanelMenu DisplayStyle="@(sidebarExpanded? MenuItemDisplayStyle.IconAndText: MenuItemDisplayStyle.Icon)" ShowArrow="false">
            <RadzenPanelMenuItem Text="Packs" Icon="folder_zip" Click="@(_ => Nav.NavigateTo("/packs"))" />
            <RadzenPanelMenuItem Text="Map" Icon="map" Disabled="@(!HasSelection)" Click="@(_ => Nav.NavigateTo("/map"))" />
            <RadzenPanelMenuItem Text="Run Game" Icon="play_circle" Disabled="@(!HasSelection)" Click="@(_ => Nav.NavigateTo("/run"))" />
            <RadzenPanelMenuItem Text="Download" Icon="download" Disabled="@(!HasSelection)" Click="@(_ => DownloadSelected())" />
            <RadzenPanelMenuItem Text="Game Elements" Icon="table_view" Click="@(_ => Nav.NavigateTo("/editor"))" />
         </RadzenPanelMenu>

    </RadzenSidebar>

    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>
</RadzenLayout>


@code {
    private bool sidebarExpanded = false;
    private bool HasSelection => GamePackService.Current is not null;
    protected override void OnInitialized()
    {
        GamePackService.PropertyChanged += (_, __) => StateHasChanged();
    }

    public void Dispose()
    {
        GamePackService.PropertyChanged -= (_, __) => StateHasChanged();
    }


    async Task OnMenuItemClick(MenuItemEventArgs args)
    {
        switch (args.Value?.ToString())
        {
            case "packs": Nav.NavigateTo("/packs"); break;
            case "map": if (HasSelection) Nav.NavigateTo("/map"); break;
            case "run": if (HasSelection) Nav.NavigateTo("/run"); break;
            case "download": if (HasSelection) await DownloadSelected(); break;
            case "editor": Nav.NavigateTo("/editor"); break;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // Don't redirect if we're already on /packs (allow /packs or /packs?x=... or trailing slash)
        var path = Nav.ToBaseRelativePath(Nav.Uri);
        var route = path.Split('?', 2)[0].TrimEnd('/');

        var isOnPacks = string.Equals(route, "packs", StringComparison.OrdinalIgnoreCase);

        if (!isOnPacks && GamePackService.Current is null)
        {
            // forceLoad avoids weirdness with client-side routing if nothing is mounted yet
            Nav.NavigateTo("/packs", forceLoad: true);
        }
    }


    private async Task DownloadSelected()
    {
        var current = GamePackService.Current;
        if (current is null)
        {
            //Snackbar.Add("No selected pack to download.", Severity.Warning);
            return;
        }

        var json = JsonSerializer.Serialize(current, new JsonSerializerOptions { WriteIndented = true, DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault });
        var b64 = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(json));
        var fileName = $"{current.Id}.json";

        await JS.InvokeVoidAsync("blazorDownloadFile", fileName, "application/json", b64);

        //Snackbar.Add($"Downloading {fileName}…", Severity.Normal);
    }

    private async Task EditGame()
    {
        var current = GamePackService.Current;
        if(current is null)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "No selected pack." });
            return;
        }
        GamePack? dialog = await DialogService.OpenAsync<PackDialog>($"Edit {current.Title}",
            new Dictionary<string,object>
            {
                { nameof(PackDialog.Value), current },
                { nameof(PackDialog.AllowEditKey), false },
            },
            new DialogOptions()
            {
                Resizable = true,
                Width = "700px",
            }
        );

        if (dialog != null)
        {
            //If the key exists, Update; else Create
            if (!await GamePackService.UpdateAsync(dialog.Id, dialog))
             {
                await GamePackService.CreateAsync(dialog.Id, dialog);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"Pack '{dialog.Id}' created." });
                
             } else
             {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"Pack '{dialog.Id}' updated." });
             }
        }

    }

}

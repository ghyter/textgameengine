@* PackDialog.razor (Radzen) *@
@using GameModel.Models
@using GameModel.Helpers
@using Radzen
@using Radzen.Blazor

@inherits ComponentBase

@inject NotificationService NotificationService
@inject DialogService DialogService

<div class="p-4" style="min-width:420px; display:flex; flex-direction:column; gap:12px;">
  <RadzenTemplateForm TItem="GamePack" Data="@_editPack" Submit="@OnSubmit" InvalidSubmit="@OnInvalid">
    <ChildContent>
      <div style="display:flex; flex-direction:column; gap:12px;">

        <!-- Key -->
        <div>
          <label class="rz-label">Key</label>
          <RadzenTextBox @ref="_keyBox"
                         @bind-Value="_key"
                         Name="Key"
                         Disabled="@(IsEdit && !AllowEditKey)"
                         Style="width:100%" />
          <RadzenRequiredValidator Component="Key" Text="Key is required." />
          <RadzenRegexValidator    Component="Key"
                                   Pattern="^[a-z0-9-_ \(\)]+$"
                                   Text="Lowercase letters, digits, hyphens only." />
          @if (_keyError is not null)
          {
            <div style="color:var(--rz-danger); font-size:.85rem; margin-top:4px;">
              @_keyError
            </div>
          }
        </div>

        <!-- Title -->
        <div>
          <label class="rz-label">Title</label>
          <RadzenTextBox @ref="_titleBox"
                         @bind-Value="_editPack.Title"
                         Name="Title"
                         Style="width:100%" />
                    <RadzenRequiredValidator Component="Title" Text="Title is required." />
        </div>

        <!-- Description -->
        <div>
          <label class="rz-label">Description</label>
          <RadzenTextArea @bind-Value="_editPack.Description" Style="width:100%" Rows="3" />
        </div>

        <div class="rz-justify-content-end rz-display-flex" style="gap:.5rem;">
          <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Click="@Cancel" />
          <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Text="@(IsEdit ? "Save" : "Create")" />
        </div>
      </div>
    </ChildContent>
  </RadzenTemplateForm>
</div>

@code {
    // ===== Parameters =====
    [Parameter] public GamePack? Value { get; set; }           // null => New; not null => Edit existing
    [Parameter] public bool AllowEditKey { get; set; } = false;

    // ===== Internals =====
    private GamePack _editPack = new();
    private string _key = string.Empty;

    private RadzenTextBox? _keyBox;
    private RadzenTextBox? _titleBox;

    private string? _keyError;

    private bool IsEdit => Value is not null;

    protected override void OnParametersSet()
    {
        _editPack = (Value is not null) ? Value.DeepClone() : new GamePack();
        _key = string.IsNullOrWhiteSpace(_editPack.Id) ? string.Empty : _editPack.Id;
        _keyError = null;
    }

    private Task OnSubmit(GamePack _)
    {
        _keyError = null;

        var key = (_key ?? string.Empty).Trim();
        if (string.IsNullOrWhiteSpace(key))
        {
            // TemplateForm already catches this via required validator, but guard anyway.
            return Task.CompletedTask;
        }

        // If editing and key changes are not allowed, enforce immutability.
        if (IsEdit && !AllowEditKey && !string.Equals(key, Value!.Id, StringComparison.Ordinal))
        {
            _keyError = "Key cannot be changed for an existing pack.";
            // Optional toast:
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = _keyError });
            StateHasChanged();
            return Task.CompletedTask;
        }

        // Finalize Id and close with result
        _editPack.Id = key;
        DialogService.Close(_editPack);
        return Task.CompletedTask;
    }

  private void OnInvalid(FormInvalidSubmitEventArgs _)
  {
    // No-op; validators show inline messages.
  }

  private void Cancel() => DialogService.Close(null);
}

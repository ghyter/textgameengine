@typeparam TElement where TElement : class, IGameElement
@using GameEditor.Client.Components.FormFields
@using MudBlazor
@using GameModel.Models
@using GameModel.Helpers
@inherits ComponentBase

<MudDialog>
    <DialogContent>
        @if (_edit !=null)       
        {
        <MudForm @ref="_form">
            <MudTextField @bind-Value="_key"
                          Label="Id"
                          Required="true"
                          Pattern="^[a-z0-9-]+$"
                          HelperText="Lowercase letters, digits, hyphens only."
                          Immediate="true"
                          Variant="Variant.Outlined"
                          Disabled="@IsEdit" />

            <MudTextField @bind-Value="_edit.Name"
                          Label="Name"
                          Variant="Variant.Outlined"
                          Required="true" />

            <MudTextField @bind-Value="_edit.Description"
                          Variant="Variant.Outlined"
                          Label="Description"
                          Lines="3" />

            <MudSwitch Label="IsVisible" 
                          @bind-Value="_edit.IsVisible"
                          Variant="Variant.Outlined"
                          HelperText="Is this element visible in the game?"
                         Dense="true" Class="mt-2" />

            <MudSelect T="string" Label="Starting State"
                       @bind-Value="_edit.StartingState"
                       Variant="Variant.Filled"
                       HelperText="This is the state of the Element at the start of the game."
                       Dense="true" Class="mt-2">
                @foreach (var stateKey in _edit.States.Keys)
                {
                    <MudSelectItem T="string" Value="@stateKey">@stateKey</MudSelectItem>
                }
            </MudSelect>


            <MudTabs Elevation="2" ApplyEffectsToContainer="true">
                <MudTabPanel Text="States">
                    @* States (string) *@
                    <DictionaryTable TValue="string"
                        Title=""
                        Help="Named states for this element."
                        @bind-Values="_edit.States" />

                </MudTabPanel>

                <MudTabPanel Text="Attributes">
                    @* States (string) *@
                    <DictionaryTable TValue="int"
                        Help="Attributes are numeric values that can be accessed at runtime (Hitpoints, Armor Class, etc)."
                        @bind-Values="_edit.Attributes" />
                </MudTabPanel>

                <MudTabPanel Text="Properties">
                    @* States (string) *@
                    <DictionaryTable TValue="string"
                                     Help="String values that can be accessed at runtime."
                                     @bind-Values="_edit.Properties" />
                </MudTabPanel>
                
                <MudTabPanel Text="Flags">
                    @* States (string) *@
                    <DictionaryTable TValue="bool"
                                     Help="True/false values that can be accessed by the Actions."
                                     @bind-Values="_edit.Flags" />
                </MudTabPanel>



                @if (_edit is Scene scene)
            {
                <MudTabPanel Text="Map Positions">
                    <MudTooltip Text="Where should this scene appear on the map?  The rows and columns originate with the starting scene.  The starting sceen is row 0, column 0 and level 0">
                    <MudGrid Spacing="5">
                        <MudItem xs="2">
                            <MudNumericField @bind-Value="scene.MapLocation.Row" Label="Row" Required="true" Step="1" Variant="Variant.Outlined"></MudNumericField>
                        </MudItem>
                        <MudItem xs="2">
                            <MudNumericField @bind-Value="scene.MapLocation.Column" Label="Column" Required="true" Step="1" Variant="Variant.Outlined"></MudNumericField>
                        </MudItem>
                        <MudItem xs="2">
                            <MudNumericField @bind-Value="scene.MapLocation.Level" Label="Level" Required="true" Step="1" Variant="Variant.Outlined"></MudNumericField>
                        </MudItem>
                    </MudGrid>
                    </MudTooltip>

                    <MudSpacer />
                    <MudTooltip Text="Height/Width of the scene on the Map.  This only affects the visual elements of the diagram.  This represents how many cells the room occupies, default is 1x1">
                        <MudGrid Spacing="5">
                            <MudItem xs="4">
                                <MudNumericField @bind-Value="scene.MapLocation.Height" Label="Height" Required="true" Step="1" Variant="Variant.Outlined"></MudNumericField>
                            </MudItem>
                            <MudItem xs="4">
                                <MudNumericField @bind-Value="scene.MapLocation.Width" Label="Width" Required="true" Step="1" Variant="Variant.Outlined"></MudNumericField>
                            </MudItem>
                        </MudGrid>
                    </MudTooltip>
                </MudTabPanel>
            }
            </MudTabs>




            <MudStack Row Justify="Justify.FlexEnd" Spacing="1" Class="mt-4">
                <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="Cancel">Cancel</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">
                    @(IsEdit ? "Save" : "Create")
                </MudButton>
            </MudStack>
        </MudForm>
        }
    </DialogContent>
</MudDialog>

@code {
    // ===== Parameters =====
    [Parameter] public TElement? Value { get; set; }  // null => New; not null => Edit existing
    [Parameter] public bool IsEdit { get; set; } = true;  // null => New; not null => Edit existing

    // ===== Internals =====
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }
    private MudForm? _form;

    // The working copy we bind the form to (never the original)
    private TElement? _edit;

    // separate key field because we validate formatting and may disable during edit
    private string _key = string.Empty;

    protected override void OnParametersSet()
    {

        // Deep clone incoming Value (polymorphic) or start a fresh instance of TElement
        if (Value is not null)
        {
            // DeepClone() should preserve runtime type; if you don't have one, you can use your JSON-based helper.
            _edit = Value.DeepClone(); // ensure this extension handles polymorphic types
            _key = string.IsNullOrWhiteSpace(_edit.Id) ? string.Empty : _edit.Id;

        }
        else
        {
            _edit = null;
        }
    }

    private async Task Submit()
    {
        if (_form is null) return;
        if (_edit is null) return;
        await _form.Validate();
        if (!_form.IsValid) return;

        var key = (_key ?? string.Empty).Trim();
        if (string.IsNullOrWhiteSpace(key)) return;

        // Apply the key to the working copy (for New or allowed key change during Edit)
        _edit.Id = key;

        // Return ONLY the working copy; the caller decides how to apply it
        MudDialog?.Close(DialogResult.Ok(_edit));
    }

    private void Cancel() => MudDialog?.Cancel();

}


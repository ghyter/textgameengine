@page "/run"
@using MudBlazor
@using GameModel.Session
@using GameModel.Models
@inject IGamePackService GamePackService
@inject ISnackbar Snackbar

<MudLayout>

    <!-- Left Drawer: Inventory / Ordinals (placeholder) -->
    <MudDrawerContainer>

        <MudDrawer Open="@_leftOpen"
                   Variant="DrawerVariant.Responsive"
                   Anchor="Anchor.Left"
                   Elevation="1"
                   DisableOverlay="false">
            <MudStack Class="p-3, m-3" Spacing="3" >
                <MudText Typo="Typo.h6">@_session.Player.Element.Name</MudText>
                <MudDivider />
                <MudText Typo="Typo.subtitle2" Class="mt-2">Inventory</MudText>
                @foreach (var e in _session.Elements.Where(e=> e.Value.Element is Item && e.Value.Location == "_inventory")){
                        <div><strong>@e.Value.Element.Name</strong></div>

                }
                <MudDivider Class="my-2" />

                <MudText Typo="Typo.subtitle2">In Room (ordinal list, placeholder)</MudText>
                @foreach (var i in _session.SceneOrdinals){
                    <MudText Typo="Typo.caption">@_session.Elements.Where(e=> e.Value.Id == i).First().Value.Element.Name</MudText>
                }
            </MudStack>
        </MudDrawer>

        <!-- Right Drawer: Level map (placeholder) -->
        <MudDrawer Open="@_rightOpen"
                   Variant="DrawerVariant.Responsive"
                   Anchor="Anchor.Right"
                   Elevation="1"
                   DisableOverlay="false">
            <MudStack Class="p-3" Spacing="2">
                <MudText Typo="Typo.h6">Game Locations</MudText>
                @foreach (var e in _session.Elements.Where(e=> e.Value.Element is Item)){
                        <div><strong>@e.Value.Element.Name</strong> - @e.Value.Location</div>
                }
                <MudDivider />
                @foreach (var e in _session.Elements.OrderBy(e=> e.Value.Element.Id)){
                        <div><strong>@e.Value.Element.Name (@e.Value.Element.Id)</strong> - @e.Value.State / @e.Value.Location</div>
                }

                <MudText Typo="Typo.subtitle2" Class="mt-2">Level Map (placeholder)</MudText>
                <MudPaper Class="pa-3 mt-2" Outlined="true">
                    <!-- TODO: inject your map canvas/graph here -->
                    <MudText Typo="Typo.caption">[map will render here]</MudText>
                </MudPaper>
            </MudStack>
        </MudDrawer>

        <MudMainContent>

            <!-- Top controls -->
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-3">
                <MudStack Row="true" Spacing="1">
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary"
                               StartIcon="@(_leftOpen ? Icons.Material.Filled.ChevronLeft : Icons.Material.Filled.ChevronRight)"
                               OnClick="@ToggleLeft">
                        Left Panel
                    </MudButton>

                    <MudButton Variant="Variant.Outlined" Color="Color.Primary"
                               StartIcon="@(_rightOpen ? Icons.Material.Filled.ChevronRight : Icons.Material.Filled.ChevronLeft)"
                               OnClick="@ToggleRight">
                        Right Panel
                    </MudButton>
                </MudStack>

                <MudText Typo="Typo.subtitle2">
                    @(_session is null
                        ? "No game loaded"
                        : $"Game: {_session.Header ?? GamePackService.Current?.Title}")
                </MudText>
            </MudStack>

            <!-- Game header + description -->
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h5">@_currentHeader</MudText>
                <MudDivider Class="my-2" />
                <MudText Style="white-space:pre-wrap">@_currentDescription</MudText>
            </MudPaper>

            <!-- Input -->
            <MudPaper Class="pa-3 mt-3">
                <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                    <MudTextField @bind-Value="_input"
                                  Label="Type a command…"
                                  Variant="Variant.Outlined"
                                  FullWidth="true"
                                  Immediate="true"
                                  OnKeyDown="CheckKey"
                                  />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ExecuteAsync">
                        Go
                    </MudButton>
                </MudStack>
            </MudPaper>

            <!-- Optional: recent log -->
            @if (_log.Count > 0)
            {
                <MudExpansionPanels Class="mt-3">
                    <MudExpansionPanel Text="Show Debug Log">
                    </MudExpansionPanel>
                </MudExpansionPanels>
            }

        </MudMainContent>

    </MudDrawerContainer>
</MudLayout>

@code {
    // Drawer state (you can control these from game context later)
    private bool _leftOpen = true;
    private bool _rightOpen = false;

    // Game session & UI
    private GameSession? _session;
    private string _currentHeader = "Welcome";
    private string _currentDescription = "Start a new game or select a pack.";
    private string _input = string.Empty;
    private readonly List<string> _log = new();

    protected override async Task OnInitializedAsync()
    {
        // Ensure a pack/session exists. Adapt this to your service API.
        // If you already create a session elsewhere, just fetch it.
        if (GamePackService.Current is null)
        {
            _currentHeader = "No Pack Selected";
            _currentDescription = "Go to Packs and select a GamePack to start.";
            return;
        }

        // Create or retrieve a session tied to the current pack.
        // TODO: replace with your actual way to create a session from the selected GamePack.
        _session = GameSession.NewGame(GamePackService.Current);
        
        var round = _session.Execute("look");
        _currentHeader = round.Header;
        _currentDescription = round.Body ?? string.Empty;
        StateHasChanged();
    }

    private void ToggleLeft()  => _leftOpen  = !_leftOpen;
    private void ToggleRight() => _rightOpen = !_rightOpen;

    private async Task CheckKey(KeyboardEventArgs e){
        if (e.Key == "Enter"){
            await ExecuteAsync();
        }
        if (e.Key == "ArrowUp"){
            _input = _session.GameLog.Last().PlayerInput ;
        }
    }

    private async Task ExecuteAsync()
    {
        if (_session is null)
        {
            Snackbar.Add("No active game session. Select a pack first.", Severity.Warning);
            return;
        }

        var input = _input?.Trim();
        if (string.IsNullOrWhiteSpace(input))
            return;

        try
        {
            var round  = _session.Execute(_input);
            // Update UI
            _currentHeader = round.Header;
            _currentDescription = round.Body!;
            _input = string.Empty;
        }
        catch (Exception ex)
        {
            _log.Add($"Error: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }

        await InvokeAsync(StateHasChanged);
    }
}
